<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Chapter 4. Visão Arquitetura</title><link rel="stylesheet" type="text/css" href="style.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.78.1"/><link rel="prev" href="ch03s02.xhtml" title="3.2. Manualmente"/><link rel="next" href="ch05.xhtml" title="Chapter 5. Camada de Visão"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">Chapter 4. Visão Arquitetura</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch03s02.xhtml">Prev</a> </td><th style="width: 60%; text-align: center; "> </th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch05.xhtml">Next</a></td></tr></table><hr/></div></header><section class="chapter" id="chp_architecture"><div class="titlepage"><div><div><h1 class="title">Chapter 4. Visão Arquitetura</h1></div></div></div>
	

	<p>Neste capítulo é dada um visão geral da arquitetura do Crux
		Framework. O Crux possui uma implementação de MVC (Model, View e Controller)
		inteligente e de fácil utilização.
	</p>

	<p>
		A camada View é	implementada através dos
		conceitos de Screen, Templates e Views, que são
		detalhados no capítulo seguinte. 
		A implementação da camada Controller está alocada no cliente. 
		Está estratégia garante	um desempenho consideravelmente
		superior às	arquiteturas onde o	Controller está no
		servidor, uma vez que dados de controle da página
		não	precisam trafegar pela rede para serem processados.
		O trafego de dados pela rede somente é usado quando é
		efetivamente necessário, que é para a acesso a camada de
		Model.
	</p>
	
	<p>
		A figura a seguir ilustra a disposição de
		cada camada no modelo cliente-servidor adotado pelo Crux em 
		comparação ao adotado por outros frameworks com o 
		controller no servidor.
	</p>

	<div class="figure" id="d5e250"><div class="figure-title">Figure 4.1.  Controle do lado do Cliente no Crux </div><div class="figure-contents">
		
		<div><img src="images/controller-client-side.gif" alt="Controle do lado do Cliente no Crux"/></div>
	</div></div><br class="figure-break"/>
	
	<p>
		A camada de modelo é responsável pelas regras
		de negócio e pelo controle de acesso aos dados. 
		Geralmente a camada de modelo é alocada no servidor
		para consolidar a arquitetura cliente-servidor e
		para garantir a	segurança dos dados, uma vez
		que este código de não fica	visível para o	cliente.
	</p>	
		
	<p>	
		Uma exceção a esta regra é quando é alocada uma
		classe Model no cliente. Existem aplicações 
		que tem esssa necessidade, para que seja possível
		o trabalho offline. Será falado em mais detalhes sobre
		essa possibilidade.
	</p>

	<p>	
		A figura a seguir apresenta a arquitetura do Crux, com suas camadas 
		e com seus principais componentes e modo de interação.
	</p>
	
	<div class="figure" id="d5e256"><div class="figure-title">Figure 4.2.  Visão geral da arquitetura </div><div class="figure-contents">
		
		<div><img src="images/arquitetura1.png" alt="Visão geral da arquitetura"/></div>
	</div></div><br class="figure-break"/>

	<div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem">
			<p>
				A <span class="italic">screen</span> é uma página que contém um ou
				mais containers de <span class="italic">views</span>.
				Cada container gerencia as suas <span class="italic">views</span> que, por
				sua vez, representam uma tela da aplicação, por exemplo, a busca de um usuário, o cadastro
				de um fornecedor ou a remoção de um produto.
			</p>
			<p>	
				A <span class="italic">screen</span> e as <span class="italic">views</span> 
				são arquivos XHTML que aceitam tags de diversas
				bibliotecas declaradas em seus cabeçalhos, dentre elas, tags
				do GWT,	Crux ou mesmo templates personalizados.
			</p>
			<p>	
				Quando é editado o código destes arquivos, é dito que se 
				trabalha de forma declarativa, uma vez que é declarada a
				estrutura da página	diretamente em um arquivo XHTML.
			</p>
		</li><li class="listitem">
			<p>
				Os <span class="italic">controllers</span> são classes escritas em
				Java que realizam a gestão dos componentes
				da tela. Desde pequenas validações (independentes de regras de
				negócio) e as chamadas	de funções do lado do servidor. 
				Quando a aplicação é compilada as classes Java são convertidas para
				<span class="italic">javascript</span> para serem executadas no cliente.
			</p>
			<p>	
				A relação entre as <span class="italic">views</span> e
				as <span class="italic">controllers</span>
				é de NxN, ou seja, uma <span class="italic">views</span> pode
				possuir vários <span class="italic">controllers</span> e, 
				dado um <span class="italic">controller</span>, este pode estar
				associado a várias	<span class="italic">views</span>. 
				A comunicação entre o cliente e servidor parte
				da <span class="italic">controller</span> em direção à Model, 
				e pode ser feita através de RPC ou REST.
			</p>
		</li><li class="listitem">
			<p>
				Os <span class="italic">services</span> são classes Java responsáveis pela 
				lógica de negócio da aplicação. 
				A partir daí, o arquiteto pode escolher a melhor tecnologia que se enquadra
				em seu contexto. Por exemplo, pode-se utilizar as classes  <span class="italic">services</span> 
				como dispatchers para EJBs, que	processarão a lógica de negócio da aplicação. 
				Ou mesmo, caso uma
				arquitetura mais simples seja desejada, as próprias classes  <span class="italic">services</span> 
				podem processar as regras de negócio, já que elas são instanciadas e
				chamadas através de servlets gerenciados pelo Crux.
			</p>
		</li></ol></div>


</section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch03s02.xhtml">Prev</a> </td><td style="width: 20%; text-align: center; "> </td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch05.xhtml">Next</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">3.2. Manualmente </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="index.xhtml">Home</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> Chapter 5. Camada de Visão</td></tr></table></div></footer></body></html>