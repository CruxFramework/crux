<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>6.7. Chamada de Serviços RPC</title><link rel="stylesheet" type="text/css" href="style.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.78.1"/><link rel="prev" href="ch06s06.xhtml" title="6.6. Validação"/><link rel="next" href="ch06s08.xhtml" title="6.8. Chamada de Serviços REST"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">6.7. Chamada de Serviços RPC</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch06s06.xhtml">Prev</a> </td><th style="width: 60%; text-align: center; ">Chapter 6. Camada de Controle</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch06s08.xhtml">Next</a></td></tr></table><hr/></div></header><section class="sect1" id="sec_control_rpc_call"><div class="titlepage"><div><div><h2 class="title" style="clear: both">6.7. Chamada de Serviços RPC</h2></div></div></div>
		
					
		<p>Pode-se usar o suporte nativo do GWT a chamadas RPC e JSON para se comunicar com o servidor. O Crux, no entanto,
		acrescenta algumas funcionalidades ao mecanismo original de RPC do GWT para tornar este processo mais fácil.</p>
		
		<p>Com o Crux, é possível utilizar um <span class="italic">Front Controller</span> no lado do servidor.
		O uso deste <span class="italic">Front Controller</span> permite que se faça apenas um único mapeamento no arquivo web.xml da aplicação.
		Em outras palavras, não pé necessário adicionar uma nova declaração de servlet no 
		módulo GWT (nem no web.xml) para cada novo serviço declarado.</p>
		
		<p>Outra melhoria é que o uso do <span class="italic">Front Controller</span> libera o programador de precisar definir 
		um EntryPoint para cada serviço. O exemplo a seguir mostra como uma chamada RPC pode ser feita com o Crux:</p>

		<div class="example" id="serviceInterfaceRPC"><div class="example-title">Example 6.11. GreetingService.java</div><div class="example-contents">
		    
			<pre class="programlisting">
	 			<!-- Generator: GNU source-highlight 2.1.2
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --><pre xmlns=""><tt><b><font color="#0000FF">public</font></b> <b><font color="#0000FF">interface</font></b> GreetingService <b><font color="#0000FF">extends</font></b> RemoteService <font color="#FF0000">{</font>
	String <b><font color="#000000">getHelloMessage</font></b><font color="#990000">(</font>String name<font color="#990000">)</font><font color="#990000">;</font>
<font color="#FF0000">}</font>
</tt></pre>
			</pre>
		</div></div><br class="example-break"/>

		<p>Repare que a interface de serviço não utiliza a anotação <span class="italic">RemoteServiceRelativePath</span>, como
		seria esperado para uma interface de chamada de serviço feita com o GWT de forma convencional. O Crux assumirá que ele deve mapear
		as chamadas da interface de serviço para o <span class="italic">Front Controller</span>. Caso a anotação esteja presente na
		declaração da interface, o Crux a utilizará da forma convencional.</p>

		<div class="example" id="serviceInterfaceAsyncRPC"><div class="example-title">Example 6.12. GreetingServiceAsync.java</div><div class="example-contents">
		    
			<pre class="programlisting">
	 			<!-- Generator: GNU source-highlight 2.1.2
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --><pre xmlns=""><tt><b><font color="#0000FF">public</font></b> <b><font color="#0000FF">interface</font></b> GreetingServiceAsync <font color="#FF0000">{</font>
	<font color="#009900">void</font> <b><font color="#000000">getHelloMessage</font></b><font color="#990000">(</font>String name<font color="#990000">,</font> AsyncCallback<font color="#990000">&lt;</font>String<font color="#990000">&gt;</font> callback<font color="#990000">)</font><font color="#990000">;</font>
<font color="#FF0000">}</font>
</tt></pre>
			</pre>
		</div></div><br class="example-break"/>

		<p>A interface assíncrona deve ser criada da mesma forma como em chamadas RPC com o GWT puro.</p>

		<div class="example" id="controllerRPC"><div class="example-title">Example 6.13. MyController.java</div><div class="example-contents">
		    
			<pre class="programlisting">
	 			<!-- Generator: GNU source-highlight 2.1.2
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --><pre xmlns=""><tt>@<b><font color="#000000">Controller</font></b><font color="#990000">(</font><font color="#FF0000">"myController"</font><font color="#990000">)</font>
<b><font color="#0000FF">public</font></b> <b><font color="#0000FF">class</font></b> MyController <font color="#FF0000">{</font>
    @Inject
    <b><font color="#0000FF">private</font></b> GreetingServiceAsync service<font color="#990000">;</font> 
    
    <b><font color="#0000FF">public</font></b> <font color="#009900">void</font> <b><font color="#000000">setService</font></b><font color="#990000">(</font>GreetingServiceAsync service<font color="#990000">)</font> <font color="#FF0000">{</font>
    	<b><font color="#0000FF">this</font></b><font color="#990000">.</font>service <font color="#990000">=</font> service<font color="#990000">;</font>
    <font color="#FF0000">}</font>
    
    @Expose
    <b><font color="#0000FF">public</font></b> <font color="#009900">void</font> <b><font color="#000000">sayHello</font></b><font color="#990000">(</font><font color="#990000">)</font> <font color="#FF0000">{</font>
    	service<font color="#990000">.</font><b><font color="#000000">getHelloMessage</font></b><font color="#990000">(</font><font color="#FF0000">"Thiago"</font><font color="#990000">,</font> <b><font color="#0000FF">new</font></b> AsyncCallbackAdapter<font color="#990000">&lt;</font>String<font color="#990000">&gt;</font><font color="#990000">(</font><b><font color="#0000FF">this</font></b><font color="#990000">)</font><font color="#FF0000">{</font>
    		@Override
    		<b><font color="#0000FF">public</font></b> <font color="#009900">void</font> <b><font color="#000000">onComplete</font></b><font color="#990000">(</font>String result<font color="#990000">)</font><font color="#FF0000">{</font>
    			Window<font color="#990000">.</font><b><font color="#000000">alert</font></b><font color="#990000">(</font>result<font color="#990000">)</font><font color="#990000">;</font>
    		<font color="#FF0000">}</font>
    	<font color="#FF0000">}</font><font color="#990000">)</font><font color="#990000">;</font>
    <font color="#FF0000">}</font>

    @Expose
    <b><font color="#0000FF">public</font></b> <font color="#009900">void</font> <b><font color="#000000">sayHello2</font></b><font color="#990000">(</font><font color="#990000">)</font> <font color="#FF0000">{</font>
    	<i><font color="#9A1900">//</font></i><i><font color="#9A1900"> You can instantiate the service proxy with GWT.create too.</font></i>
    	GreetingServiceAsync service <font color="#990000">=</font> GWT<font color="#990000">.</font><b><font color="#000000">create</font></b><font color="#990000">(</font>GreetingService<font color="#990000">.</font><b><font color="#0000FF">class</font></b><font color="#990000">)</font><font color="#990000">;</font>
    	service<font color="#990000">.</font><b><font color="#000000">getHelloMessage</font></b><font color="#990000">(</font><font color="#FF0000">"Thiago"</font><font color="#990000">,</font> <b><font color="#0000FF">new</font></b> AsyncCallbackAdapter<font color="#990000">&lt;</font>String<font color="#990000">&gt;</font><font color="#990000">(</font><b><font color="#0000FF">this</font></b><font color="#990000">)</font><font color="#FF0000">{</font>
    		@Override
    		<b><font color="#0000FF">public</font></b> <font color="#009900">void</font> <b><font color="#000000">onComplete</font></b><font color="#990000">(</font>String result<font color="#990000">)</font><font color="#FF0000">{</font>
    			Window<font color="#990000">.</font><b><font color="#000000">alert</font></b><font color="#990000">(</font>result<font color="#990000">)</font><font color="#990000">;</font>
    		<font color="#FF0000">}</font>
    	<font color="#FF0000">}</font><font color="#990000">)</font><font color="#990000">;</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font>
</tt></pre>
			</pre>
		</div></div><br class="example-break"/>

		<p> A controller realiza a chamada de forma similar ao mecanismo convencional do GWT. Pode-se observar que foi utilizada a
		classe do Crux <span class="italic">AsyncCallbackAdapter</span> como callback para a operação solicitada. Este adapter 
		implementa um tratador de erros padrão para a operação que apenas delega para o tratador padrão de erros registrado junto ao Crux
		qualquer erro recebido.</p>  
		
		<p> A seção <a class="xref" href="ch07.xhtml#sec_model_rpc" title="7.1. Servidor acesso via RPC">Servidor acesso via RPC</a> demonstra como implementar, no servidor, a classe de serviço que irá atender a estas requisições feitas por este 
		código apresentado aqui.</p>  
	</section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch06s06.xhtml">Prev</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="ch06.xhtml">Up</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch06s08.xhtml">Next</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">6.6. Validação </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="index.xhtml">Home</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> 6.8. Chamada de Serviços REST</td></tr></table></div></footer></body></html>