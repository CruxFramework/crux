<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Chapter 6. Camada de Controle</title><link rel="stylesheet" type="text/css" href="style.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.78.1"/><link rel="prev" href="ch05s05.xhtml" title="5.5. Chamada de Eventos"/><link rel="next" href="ch06s02.xhtml" title="6.2. Inversion of Control (IoC)"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">Chapter 6. Camada de Controle</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch05s05.xhtml">Prev</a> </td><th style="width: 60%; text-align: center; "> </th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch06s02.xhtml">Next</a></td></tr></table><hr/></div></header><section class="chapter" id="chp_controller"><div class="titlepage"><div><div><h1 class="title">Chapter 6. Camada de Controle</h1></div></div></div><div class="toc"><div class="toc-title">Table of Contents</div><ul class="toc"><li><span class="sect1"><a href="ch06.xhtml#sec_control_anot">6.1. Anotações das <span class="italic">Controllers</span></a></span><ul><li><span class="sect2"><a href="ch06.xhtml#sec_control_anot_controler">6.1.1. @Controller </a></span></li><li><span class="sect2"><a href="ch06.xhtml#sec_control_anot_inject">6.1.2. @Inject</a></span></li><li><span class="sect2"><a href="ch06.xhtml#sec_control_anot_expose">6.1.3. @Expose</a></span></li></ul></li><li><span class="sect1"><a href="ch06s02.xhtml">6.2. Inversion of Control (IoC)</a></span><ul><li><span class="sect2"><a href="ch06s02.xhtml#sec_control_ioc_scope">6.2.1. Escopo dos objetos criados</a></span></li><li><span class="sect2"><a href="ch06s02.xhtml#sec_control_ioc_conf">6.2.2. Configurações globais do container</a></span></li></ul></li><li><span class="sect1"><a href="ch06s03.xhtml">6.3. Value Binding</a></span></li><li><span class="sect1"><a href="ch06s04.xhtml">6.4. Usando as Controllers na View</a></span></li><li><span class="sect1"><a href="ch06s05.xhtml">6.5. Comunicação entre controladores</a></span></li><li><span class="sect1"><a href="ch06s06.xhtml">6.6. Validação</a></span></li><li><span class="sect1"><a href="ch06s07.xhtml">6.7. Chamada de Serviços RPC</a></span></li><li><span class="sect1"><a href="ch06s08.xhtml">6.8. Chamada de Serviços REST</a></span></li></ul></div>
	

	<p>Este capítulo apresenta a camada de controle do Crux Framework.
	As classes de controle são chamadas para tratar os eventos de tela da aplicação. Para definir uma <span class="italic">Controller</span> 
	basta criar uma classe Java com a anotação <span class="italic">@Controller</span>. Na anotação deve ser informado
	o nome pelo qual a classe de controle será referenciada nas páginas.</p>

	<p>Veja o exemplo a seguir.</p>

	<div class="example" id="simpleController"><div class="example-title">Example 6.1. Definindo uma <code class="code">Controller</code></div><div class="example-contents">
	    
		<pre class="programlisting">
 			<!-- Generator: GNU source-highlight 2.1.2
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --><pre xmlns=""><tt>@<b><font color="#000000">Controller</font></b><font color="#990000">(</font><font color="#FF0000">"myController"</font><font color="#990000">)</font>
<b><font color="#0000FF">public</font></b> <b><font color="#0000FF">class</font></b> MyController <font color="#FF0000">{</font>
	 <i><font color="#9A1900">//</font></i><i><font color="#9A1900"> ... event handlers here</font></i>
<font color="#FF0000">}</font>
</tt></pre>
		</pre>
	</div></div><br class="example-break"/>

	<p>A classe de controle define os métodos para tratar eventos nas telas da aplicação. Os métodos de controle devem:</p>
	
	<div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem">
			<p>Ter visibilidae pública (<span class="italic">public</span>). </p>
		</li><li class="listitem">
			<p>Estar marcado com a anotação  <span class="italic">@Expose</span>.</p>
		</li><li class="listitem">
			<p>Deve declarar apenas um ou nenhum parâmetro. Se tiver um parâmetro, este deve ser um subtipo de <span class="italic">GwtEvent</span> 
			e o método somente pode ser utilizado para tratar esse tipo de evento.</p>
		</li></ul></div>
	
    <p>Veja o exemplo a seguir, com alguns métodos:</p>

	<div class="example" id="simpleControllerMethods"><div class="example-title">Example 6.2. Métodos em uma <code class="code">Controller</code></div><div class="example-contents">
	    
		<pre class="programlisting">
 			<!-- Generator: GNU source-highlight 2.1.2
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --><pre xmlns=""><tt>@<b><font color="#000000">Controller</font></b><font color="#990000">(</font><font color="#FF0000">"clientHandler"</font><font color="#990000">)</font>
<b><font color="#0000FF">public</font></b> <b><font color="#0000FF">class</font></b> MyController <font color="#FF0000">{</font>
   @Expose
   <b><font color="#0000FF">public</font></b> <font color="#009900">void</font> <b><font color="#000000">helloWorld</font></b><font color="#990000">(</font><font color="#990000">)</font> <font color="#FF0000">{</font> 
	   <i><font color="#9A1900">//</font></i><i><font color="#9A1900"> code here   </font></i>
   <font color="#FF0000">}</font>
   
   @Expose
   <b><font color="#0000FF">public</font></b> <font color="#009900">void</font> <b><font color="#000000">onClose</font></b><font color="#990000">(</font>CloseEvent<font color="#990000">&lt;</font>Window<font color="#990000">&gt;</font> event<font color="#990000">)</font> <font color="#FF0000">{</font> 
	   <i><font color="#9A1900">//</font></i><i><font color="#9A1900"> code here   </font></i>
   <font color="#FF0000">}</font>
   
   <b><font color="#0000FF">protected</font></b> <font color="#009900">void</font> <b><font color="#000000">myMethod</font></b><font color="#990000">(</font>String string<font color="#990000">)</font> <font color="#FF0000">{</font> 
	   <i><font color="#9A1900">//</font></i><i><font color="#9A1900"> code here   </font></i>
   <font color="#FF0000">}</font>
<font color="#FF0000">}</font>
</tt></pre>
		</pre>
	</div></div><br class="example-break"/>

	<p>Note que nesta <span class="italic">Controller</span> existe um método que não atende as condições para 
	tratamento de eventos, o <code class="code">myMethod</code>. 
	Este método não pode ser chamando de forma declarativa. </p>

	<section class="sect1" id="sec_control_anot"><div class="titlepage"><div><div><h2 class="title" style="clear: both">6.1. Anotações das <span class="italic">Controllers</span></h2></div></div></div>
		

		<p>O Crux disponibiliza uma série de anotações para auxiliar na codificação das classes de controle.
		A seguir são apresentadas as anotações que podem ser utilizadas nesta camada.</p>

		<section class="sect2" id="sec_control_anot_controler"><div class="titlepage"><div><div><h3 class="title">6.1.1. @Controller </h3></div></div></div>
			
			
			<p>Esta anotação é utilizada para marcar uma classe como sendo uma <span class="italic">Controller</span>. Toda classe de controle
			deve estar marcada com esta anotação. A tabela abaixo mostra todos os seus atributos:</p>
			
			<div class="table" id="d5e631"><div class="table-title">Table 6.1. Atributos da <span class="italic">@Controller</span></div><div class="table-contents">
				
				<table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col style="text-align: left; " class="c1"/><col style="text-align: left; " class="c2"/><col style="text-align: left; " class="c3"/><col style="text-align: left; " class="c4"/></colgroup><thead><tr><th style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> Propriedade </th><th style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> Requerida </th><th style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> Valor Padrão </th><th style="text-align: left; border-bottom: 0.5pt solid ; "> Descrição </th></tr></thead><tbody><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> value</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> Sim</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> Sem valor</td><td style="text-align: left; border-bottom: 0.5pt solid ; "> Define o nome da <span class="italic">Controller</span>. 
							Usado nas paginas para referenciar a <span class="italic">Controller</span>.</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> stateful</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> Não</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> true</td><td style="text-align: left; border-bottom: 0.5pt solid ; "> Se for "true" uma mesma instância da classe de controle é usada
							para tratar todos os eventos a ela direcionados, dentro da mesma View. 
							Se for "false" uma nova instancia é usada para cada novo evento.</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> lazy</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> Não</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> true</td><td style="text-align: left; border-bottom: 0.5pt solid ; "> Se for "true" o objeto <span class="italic">Controller</span> é construído apenas quando
							é chamado pela primeira vez.</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; "> supportedDevices</td><td style="text-align: left; border-right: 0.5pt solid ; "> Não</td><td style="text-align: left; border-right: 0.5pt solid ; "> Device.all	</td><td style="text-align: left; "> Pode-se optar por usar a classe anotada apenas para uma lista restrita de dispositivos. Isso permite que se 
							crie duas classes diferentes, usando o mesmo nome do controlador, mas um voltada para um conjunto de dispositivos e  
							outra voltada para um conjunto diferente.</td></tr></tbody></table>
			</div></div><br class="table-break"/>
	
		</section>

		<section class="sect2" id="sec_control_anot_inject"><div class="titlepage"><div><div><h3 class="title">6.1.2. @Inject</h3></div></div></div>
			

			<p>O Crux oferece um container <em class="glossterm">IoC</em> para ser utilizado no lado cliente da aplicação. Desta forma, pode-se anotar as classes de controle
			da aplicação para definir a forma como objetos utilizados são instanciados e associados às classes de controle.</p>

			<p>Veja abaixo um pequeno exemplo:</p>

			<div class="example" id="iocControllerSample"><div class="example-title">Example 6.3. Injeção de valores na <code class="code">Controller</code></div><div class="example-contents">
			    
				<pre class="programlisting">
		 			<!-- Generator: GNU source-highlight 2.1.2
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --><pre xmlns=""><tt>@<b><font color="#000000">Controller</font></b><font color="#990000">(</font><font color="#FF0000">"myIoCController"</font><font color="#990000">)</font>
<b><font color="#0000FF">public</font></b> <b><font color="#0000FF">class</font></b> MyIoCController <font color="#FF0000">{</font>
    @Inject
    <b><font color="#0000FF">private</font></b> GreetingServiceAsync service<font color="#990000">;</font> 
    
    <b><font color="#0000FF">public</font></b> <font color="#009900">void</font> <b><font color="#000000">setService</font></b><font color="#990000">(</font>GreetingServiceAsync service<font color="#990000">)</font> <font color="#FF0000">{</font>
    	<b><font color="#0000FF">this</font></b><font color="#990000">.</font>service <font color="#990000">=</font> service<font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i><i><font color="#9A1900"> other event handlers</font></i>
<font color="#FF0000">}</font>
</tt></pre>
				</pre>
			</div></div><br class="example-break"/>

			<p>A seção <a class="xref" href="ch06s02.xhtml" title="6.2. Inversion of Control (IoC)">Inversion of Control (IoC)</a> apresenta o funcionamento deste container IoC do Crux.</p>
		</section>
		
		<section class="sect2" id="sec_control_anot_expose"><div class="titlepage"><div><div><h3 class="title">6.1.3. @Expose</h3></div></div></div>
			

			<p>O <span class="italic">@Expose</span> é a anotação usada para expor 
            um método como tratador de evento. Todo método que vá ser usado para tratamento de um evento declarado em uma tela da aplicação deve estar 
            anotado com esta anotação.</p>	
		</section>
		
	</section>

		
	
	

	

	

	

	

	

</section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch05s05.xhtml">Prev</a> </td><td style="width: 20%; text-align: center; "> </td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch06s02.xhtml">Next</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">5.5. Chamada de Eventos </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="index.xhtml">Home</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> 6.2. Inversion of Control (IoC)</td></tr></table></div></footer></body></html>