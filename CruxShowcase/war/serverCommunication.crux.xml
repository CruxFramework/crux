<html 
	xmlns="http://www.w3.org/1999/xhtml" 
	xmlns:c="http://www.cruxframework.org/crux" 
	xmlns:a="http://www.cruxframework.org/crux/widgets"
	xmlns:b="http://www.cruxframework.org/crux/gwt"	
	xmlns:s="http://www.cruxframework.org/templates/showcase">

	<head>
		<title>Server Communication</title>
		<link rel="stylesheet" type="text/css" href="style/css/standard.css" />
	</head>

	<body>
		<script type="text/javascript" src="showcase/showcase.nocache.js"></script>

		<c:screen useController="serverCommunicationController"/>

		<center>
		
		<a:decoratedPanel id="borders" width="370">
			<a:widget>
				<b:horizontalPanel id="cells" spacing="5" style="margin:5px">
					<b:label id="label" text="Type your name:"/>
					<b:textBox id="name" />
					<a:decoratedButton id="button" onClick="serverCommunicationController.callService" text="Say Hello!"/>
				</b:horizontalPanel>				
			</a:widget>
		</a:decoratedPanel>
		
		</center>
		
		<s:info sourcesController="serverCommunicationSourcesController">
			<s:widgetInfo>
				The client-server communication model proposed by Crux is very similar to the GWT's model. The main difference is that Crux does not 
				require you declare your server-side business classes as a Servlets. Instead, with Crux, service implementation classes 
				are just POJOs, which are bound to their interfaces by an internal front-controller mechanism.
			</s:widgetInfo>
			<s:exampleInfo>
				you can see a simple Hello World example, where you type and submit your name and the server answers 
				with a greeting.  
			</s:exampleInfo>
		</s:info>

	</body>
</html>