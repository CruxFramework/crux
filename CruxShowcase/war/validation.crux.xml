<html 
	xmlns="http://www.w3.org/1999/xhtml" 
	xmlns:c="http://www.cruxframework.org/crux" 
	xmlns:a="http://www.cruxframework.org/crux/widgets"
	xmlns:b="http://www.cruxframework.org/crux/gwt"	
	xmlns:s="http://www.cruxframework.org/templates/showcase">

	<head>
		<title>Validation</title>
		<link rel="stylesheet" type="text/css" href="style/css/standard.css" />
	</head>

	<body>

		<script type="text/javascript" src="showcase/showcase.nocache.js"></script>

		<c:screen useController="validationController"/>
		
		<center>
		
		<a:decoratedPanel id="borders" width="200">
			<a:widget>
				<b:verticalPanel id="vPanel" verticalAlignment="middle" horizontalAlignment="center" spacing="15">
					<b:cell>
						<b:checkBox id="checkBox" text="Ensure this is checked"/>
					</b:cell>
				    <b:cell>
				    	<a:decoratedButton id="changeButton" text="Click Me" onClick="validationController.onClick"/>
				    </b:cell>		
				</b:verticalPanel>
			</a:widget>
		</a:decoratedPanel>
		
		</center>
		
		<s:info sourcesController="baseSourcesController">
			<s:widgetInfo>
				Crux allows you to protected your controllers' methods by declaring validation methods for 
				them. A validation method can be linked to a logical method by using the @Validate annotation. The 
				expected behavior of a validation method is to throw a ValidateException case any requirement
				was not satisfied by the user's input. If everything is OK, the validation method just does nothing.    
			</s:widgetInfo>
			<s:exampleInfo>
				we show a very simple kind of validation: we prevent the execution of the target method if the 
				checkbox is not checked.  
			</s:exampleInfo>
		</s:info>
		
	</body>
</html>