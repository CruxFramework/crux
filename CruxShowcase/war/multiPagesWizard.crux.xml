<html 
	xmlns="http://www.w3.org/1999/xhtml" 
	xmlns:c="http://www.cruxframework.org/crux" 
	xmlns:w="http://www.cruxframework.org/crux/widgets"
	xmlns:b="http://www.cruxframework.org/crux/gwt"
	xmlns:s="http://www.cruxframework.org/templates/showcase">

	<head>
		<title>Multi-Pages Wizard</title>
		<link rel="stylesheet" type="text/css" href="style/css/standard.css" />
	</head>

	<body>
		<script type="text/javascript" src="showcase/showcase.nocache.js"></script>

		<c:screen useController="multiWizardController"/>

		<center>
			<w:decoratedPanel id="border" width="600">
				<w:widget>
					<w:wizard id="wizard" width="580" height="300" onCancel="multiWizardController.onCancel" 
					          onFinish="multiWizardController.onFinish" wizardContextObject="person" style="margin:5px">
						<w:steps>
							<w:page url="multiPagesWizardWelcomeStep.html" label="Welcome" id="welcomeStep" />
							<w:page url="multiPagesWizardPersonalInfoStep.html" label="Enter your Personal Info" id="personalInfoStep" />
							<w:page url="multiPagesWizardThankYouStep.html" label="Thank You!" id="thankYouStep" />
						</w:steps>
						<w:controlBar/>
						<w:navigationBar horizontalAlignment="left" showAllSteps="false"/>
					</w:wizard>
				</w:widget>
			</w:decoratedPanel>
		</center>
		
		<s:info sourcesController="multiPagesWizardSourcesController" width="600">
			<s:widgetInfo>
				Wizards are components designed to offer an user interface that relies on 
				step-by-step instructions for performing some task. They have a flexible 
				data context where you can store the data collected at each step. The navigation 
				rules are also customizable: based on arbitrary business-rules, you can prevent 
				users from moving forward or backward through the steps. You can even create 
				custom actions for specific steps, beyond the common built-in actions: back, 
				next, finish and cancel. Wizards can come in two flavors: multi-page or
				single-page. This parameter defines if each step resides in its own HTML page or 
				if each step is just a panel in the shared document.
			</s:widgetInfo>
			<s:exampleInfo>
				we show a multi-pages wizard. Take a look at the source code and note 
				that each step has its own HTML page and its own controller, making the 
				code more modular and easy to read. Here we are using various features 
				offered by wizards, like 
				enabling and disabling transition commands, validating forms before 
				transitions and saving and reading data from wizard's context.	
			</s:exampleInfo>
		</s:info>
		
	</body>
</html>